#!/usr/bin/env node

var fs = require('fs'),
    path = require('path'),
    util = require('util'),
    mkdirp = require('mkdirp'),
    minimist = require('minimist'),
    Transform = require('stream').Transform,
    browserify = require('browserify'),
    to5Browserify = require('6to5ify');

var basedir = 'src',
    entry = path.resolve(basedir, 'index.js'),
    outDir = path.resolve('dist'),
    outFile = path.resolve(outDir, 'domtastic.js');

var argv = minimist(process.argv.slice(2)),
    exclude = argv.exclude ? argv.exclude.split(',') : [],
    include = argv.include ? argv.include.split(',') : [],
    base = ['index', 'util'];

util.inherits(ModuleExcluder, Transform);

function ModuleExcluder(modules) {
    this.modules = modules;
    this.removeDeReqsRE = new RegExp('import.+(__M__)\';\\n'.replace(/__M__/, modules.join('|')), 'g');
    this.removeExtendsRE = new RegExp('(,\\ (__M__)\\b)'.replace(/__M__/, modules.join('_?|')), 'g');
    Transform.call(this);
}

ModuleExcluder.prototype._transform = function(chunk, encoding, done) {
    var data = chunk.toString();
    data = this.modules.length ? data.replace(this.removeDeReqsRE, '').replace(this.removeExtendsRE, '') : data;
    done(null, data);
};

function bundle(excludes, includes) {

    var excluder = new ModuleExcluder(excludes),
        customFile = fs.createReadStream(entry).pipe(excluder),
        writer = fs.createWriteStream(outFile);

    browserify(customFile, {
            standalone: 'domtastic',
            basedir: basedir
        })
        .transform(to5Browserify)
        .bundle()
        .pipe(writer);

    writer.on('finish', function() {
        console.log('Custom UMD bundle at', path.relative(process.cwd(), outFile));
        console.log('Excluded modules:', excludes.join(', '));
        console.log('Included modules:', includes.join(', '));
        process.exit(0);
    });
}

mkdirp(outDir, function(err) {
    if (err) throw err;
    fs.readdir(basedir, function(err, modules) {
        var all = modules.map(function(module) {
            return module.replace(/\.js$/, '');
        });
        include = include.length ? base.concat(include) : all.filter(function(module) {
            return exclude.indexOf(module) === -1;
        });
        exclude = exclude.length ? exclude : all.filter(function(module) {
            return include.indexOf(module) === -1;
        });
        bundle(exclude, include);
    });
});
